{"ast":null,"code":"import axios from \"axios\";\nimport { VacationsActionType, vacationsStore } from \"../Redux/VacationsState\";\n\nclass VacationsService {\n  // Get all vacations from backend:\n  async getAllVacations() {\n    // Take vacations resides in redux global state:\n    let vacations = vacationsStore.getState().vacations; // If we have no vacations in global state - fetch them from server:\n\n    if (vacations.length === 0) {\n      // Fetch all vacations from backend:\n      const response = await axios.get(\"http://localhost:3001/api/vacations/\"); // Extract vacations from axios response:\n\n      vacations = response.data; // Save fetched vacations in global state:\n\n      const action = {\n        type: VacationsActionType.FetchVacations,\n        payload: vacations\n      };\n      vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\n    } // Return vacations:\n\n\n    return vacations;\n  } // Get one vacation by id\n\n\n  async getOneVacation(id) {\n    // Desired vacation:\n    let vacation; // Take vacations resides in redux global state:\n\n    let vacations = vacationsStore.getState().vacations; // If we have no vacations in global state - fetch given vacation from server:\n\n    if (vacations.length === 0) {\n      // Fetch one vacation from backend:\n      const response = await axios.get(\"http://localhost:3001/api/vacations/\" + id); // Save fetched vacation:\n\n      vacation = response.data;\n    } else {\n      // Take vacation from redux:\n      vacation = vacations.find(p => p.id === id);\n    } // Return vacation:\n\n\n    return vacation;\n  } // Add new vacation:\n\n\n  async addVacation(vacation) {\n    // Convert VacationModel into FormData because we need to send text + image:\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"image\", vacation.image[0]);\n    formData.append(\"fromDate\", vacation.fromDate.toString());\n    formData.append(\"untilDate\", vacation.untilDate.toString());\n    formData.append(\"price\", vacation.price.toString()); // Send vacation to backend:\n\n    const response = await axios.post(\"http://localhost:3001/api/vacations\", formData);\n    const addedVacation = response.data; // Send added vacation to redux global state:\n\n    const action = {\n      type: VacationsActionType.AddVacation,\n      payload: addedVacation\n    };\n    vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\n  } // Update vacation:\n\n\n  async updateVacation(vacation) {\n    // Convert VacationModel into FormData because we need to send text + image:\n    const formData = new FormData();\n    formData.append(\"destination\", vacation.destination);\n    formData.append(\"description\", vacation.description);\n    formData.append(\"image\", vacation.image[0]);\n    formData.append(\"fromDate\", vacation.fromDate.toString());\n    formData.append(\"untilDate\", vacation.untilDate.toString());\n    formData.append(\"price\", vacation.price.toString()); // Send vacation to backend:\n\n    const response = await axios.put(\"http://localhost:3001/api/vacations/\" + vacation.id, formData);\n    const updatedVacation = response.data; // Send updated vacation to redux global state:\n\n    const action = {\n      type: VacationsActionType.UpdateVacation,\n      payload: updatedVacation\n    };\n    vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\n  } // Delete vacation:\n\n\n  async deleteVacation(id) {\n    // Delete this vacation in backend:\n    await axios.delete(\"http://localhost:3001/api/vacations/\" + id); // Delete this vacation also in redux global state:\n\n    const action = {\n      type: VacationsActionType.DeleteVacation,\n      payload: id\n    };\n    vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\n  }\n\n}\n\nconst vacationsService = new VacationsService();\nexport default vacationsService;","map":{"version":3,"names":["axios","VacationsActionType","vacationsStore","VacationsService","getAllVacations","vacations","getState","length","response","get","data","action","type","FetchVacations","payload","dispatch","getOneVacation","id","vacation","find","p","addVacation","formData","FormData","append","destination","description","image","fromDate","toString","untilDate","price","post","addedVacation","AddVacation","updateVacation","put","updatedVacation","UpdateVacation","deleteVacation","delete","DeleteVacation","vacationsService"],"sources":["/Users/nivyulevitch/Dropbox/Full Stack/John Bryce/Projects/3/Vacation-204789671/Vacation-Project/Frontend/src/Services/VacationsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport VacationModel from \"../Models/VacationModel\";\r\nimport {\r\n  VacationsAction,\r\n  VacationsActionType,\r\n  vacationsStore,\r\n} from \"../Redux/VacationsState\";\r\n\r\nclass VacationsService {\r\n  // Get all vacations from backend:\r\n  public async getAllVacations(): Promise<VacationModel[]> {\r\n    // Take vacations resides in redux global state:\r\n    let vacations = vacationsStore.getState().vacations;\r\n\r\n    // If we have no vacations in global state - fetch them from server:\r\n    if (vacations.length === 0) {\r\n      // Fetch all vacations from backend:\r\n      const response = await axios.get<VacationModel[]>(\r\n        \"http://localhost:3001/api/vacations/\"\r\n      );\r\n\r\n      // Extract vacations from axios response:\r\n      vacations = response.data;\r\n\r\n      // Save fetched vacations in global state:\r\n      const action: VacationsAction = {\r\n        type: VacationsActionType.FetchVacations,\r\n        payload: vacations\r\n      };\r\n      vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\r\n    }\r\n\r\n    // Return vacations:\r\n    return vacations;\r\n  }\r\n\r\n  // Get one vacation by id\r\n  public async getOneVacation(id: number): Promise<VacationModel> {\r\n    // Desired vacation:\r\n    let vacation;\r\n\r\n    // Take vacations resides in redux global state:\r\n    let vacations = vacationsStore.getState().vacations;\r\n\r\n    // If we have no vacations in global state - fetch given vacation from server:\r\n    if (vacations.length === 0) {\r\n      // Fetch one vacation from backend:\r\n      const response = await axios.get<VacationModel>(\r\n        \"http://localhost:3001/api/vacations/\" + id\r\n      );\r\n\r\n      // Save fetched vacation:\r\n      vacation = response.data;\r\n    } else {\r\n      // Take vacation from redux:\r\n      vacation = vacations.find((p) => p.id === id);\r\n    }\r\n\r\n    // Return vacation:\r\n    return vacation;\r\n  }\r\n\r\n  // Add new vacation:\r\n  public async addVacation(vacation: VacationModel): Promise<void> {\r\n    // Convert VacationModel into FormData because we need to send text + image:\r\n    const formData = new FormData();\r\n    formData.append(\"destination\", vacation.destination);\r\n    formData.append(\"description\", vacation.description);\r\n    formData.append(\"image\", vacation.image[0]);\r\n    formData.append(\"fromDate\", vacation.fromDate.toString());\r\n    formData.append(\"untilDate\", vacation.untilDate.toString());\r\n    formData.append(\"price\", vacation.price.toString());\r\n\r\n    // Send vacation to backend:\r\n    const response = await axios.post<VacationModel>(\r\n      \"http://localhost:3001/api/vacations\",\r\n      formData\r\n    );\r\n    const addedVacation = response.data;\r\n\r\n    // Send added vacation to redux global state:\r\n    const action: VacationsAction = {\r\n      type: VacationsActionType.AddVacation,\r\n      payload: addedVacation\r\n    };\r\n    vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\r\n  }\r\n\r\n  // Update vacation:\r\n  public async updateVacation(vacation: VacationModel): Promise<void> {\r\n    // Convert VacationModel into FormData because we need to send text + image:\r\n    const formData = new FormData();\r\n    formData.append(\"destination\", vacation.destination);\r\n    formData.append(\"description\", vacation.description);\r\n    formData.append(\"image\", vacation.image[0]);\r\n    formData.append(\"fromDate\", vacation.fromDate.toString());\r\n    formData.append(\"untilDate\", vacation.untilDate.toString());\r\n    formData.append(\"price\", vacation.price.toString());\r\n\r\n    // Send vacation to backend:\r\n    const response = await axios.put<VacationModel>(\r\n      \"http://localhost:3001/api/vacations/\" + vacation.id,\r\n      formData\r\n    );\r\n    const updatedVacation = response.data;\r\n\r\n    // Send updated vacation to redux global state:\r\n    const action: VacationsAction = {\r\n      type: VacationsActionType.UpdateVacation,\r\n      payload: updatedVacation\r\n    };\r\n    vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\r\n  }\r\n\r\n  // Delete vacation:\r\n  public async deleteVacation(id: number): Promise<void> {\r\n\r\n    // Delete this vacation in backend:\r\n    await axios.delete(\"http://localhost:3001/api/vacations/\" + id);\r\n\r\n    // Delete this vacation also in redux global state:\r\n    const action: VacationsAction = {\r\n        type: VacationsActionType.DeleteVacation,\r\n        payload: id\r\n      };\r\n      vacationsStore.dispatch(action); // Redux will call vacationReducer to perform this action.\r\n\r\n  }\r\n}\r\n\r\nconst vacationsService = new VacationsService();\r\n\r\nexport default vacationsService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}