{"ast":null,"code":"import { createStore } from \"redux\";\n// 1. State - This is the data:\nexport class VacationsState {\n  constructor() {\n    this.vacations = [];\n  } // Our global data.\n\n\n} // 2. Action Type - List of actions we can do on the above state:\n\nexport let VacationsActionType; // 3. Action - Object for describing a single operation on the state:\n\n(function (VacationsActionType) {\n  VacationsActionType[\"FetchVacations\"] = \"FetchVacations\";\n  VacationsActionType[\"AddVacation\"] = \"AddVacation\";\n  VacationsActionType[\"UpdateVacation\"] = \"UpdateVacation\";\n  VacationsActionType[\"DeleteVacation\"] = \"DeleteVacation\";\n})(VacationsActionType || (VacationsActionType = {}));\n\n// 4. Reducer - Function which performs the needed operation:\nexport function vacationsReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new VacationsState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...currentState\n  }; // We must duplicate the original state object.\n  // Do the change on the newState:\n\n  switch (action.type) {\n    case VacationsActionType.FetchVacations:\n      // Here payload must be all vacations fetched from the server.\n      newState.vacations = action.payload; // Set all fetched vacations to the state.\n\n      break;\n\n    case VacationsActionType.AddVacation:\n      // Here payload must be the vacation to add.\n      newState.vacations.push(action.payload); // Add the new vacation to the state.\n\n      break;\n\n    case VacationsActionType.UpdateVacation:\n      // Here payload must be the vacation to update.\n      const indexToUpdate = newState.vacations.findIndex(v => v.id === action.payload.id); // -1 if not exist.\n\n      if (indexToUpdate >= 0) {\n        newState.vacations[indexToUpdate] = action.payload; // Update\n      }\n\n      break;\n\n    case VacationsActionType.DeleteVacation:\n      // Here payload must be id to delete.\n      const indexToDelete = newState.vacations.findIndex(p => p.id === action.payload); // -1 if not exist.\n\n      if (indexToDelete >= 0) {\n        newState.vacations.splice(indexToDelete, 1); // Delete\n      }\n\n      break;\n  }\n\n  return newState; // Return the new state\n} // 5. Store - redux object for managing the global state:\n\nexport const vacationsStore = createStore(vacationsReducer);","map":{"version":3,"names":["createStore","VacationsState","vacations","VacationsActionType","vacationsReducer","currentState","action","newState","type","FetchVacations","payload","AddVacation","push","UpdateVacation","indexToUpdate","findIndex","v","id","DeleteVacation","indexToDelete","p","splice","vacationsStore"],"sources":["/Users/nivyulevitch/Dropbox/Full Stack/John Bryce/Projects/3/Vacation-204789671/Vacation-Project/Frontend/src/Redux/VacationsState.ts"],"sourcesContent":["import { createStore } from \"redux\";\nimport VacationModel from \"../Models/VacationModel\";\n\n// 1. State - This is the data:\nexport class VacationsState {\n  public vacations: VacationModel[] = []; // Our global data.\n}\n\n// 2. Action Type - List of actions we can do on the above state:\nexport enum VacationsActionType {\n  FetchVacations = \"FetchVacations\", // Fetch all vacations from backend.\n  AddVacation = \"AddVacation\", // Add new vacation.\n  UpdateVacation = \"UpdateVacation\", // Update existing vacation.\n  DeleteVacation = \"DeleteVacation\", // Delete existing vacation.\n}\n\n// 3. Action - Object for describing a single operation on the state:\nexport interface VacationsAction {\n  type: VacationsActionType; // Which operation we're going to do.\n  payload: any; // Which data we're sending.\n}\n\n// 4. Reducer - Function which performs the needed operation:\nexport function vacationsReducer ( currentState = new VacationsState(), action: VacationsAction ): VacationsState {\n\n  const newState = { ...currentState }; // We must duplicate the original state object.\n\n  // Do the change on the newState:\n  switch (action.type) {\n    case VacationsActionType.FetchVacations: // Here payload must be all vacations fetched from the server.\n        newState.vacations = action.payload; // Set all fetched vacations to the state.\n        break;\n\n    case VacationsActionType.AddVacation: // Here payload must be the vacation to add.\n        newState.vacations.push(action.payload); // Add the new vacation to the state.\n        break;\n\n    case VacationsActionType.UpdateVacation: // Here payload must be the vacation to update.\n        const indexToUpdate = newState.vacations.findIndex(v => v.id === action.payload.id); // -1 if not exist.\n        \n        if (indexToUpdate >= 0) {\n            newState.vacations[indexToUpdate] = action.payload; // Update\n        }\n        break;\n\n    case VacationsActionType.DeleteVacation: // Here payload must be id to delete.\n        const indexToDelete = newState.vacations.findIndex(p => p.id === action.payload); // -1 if not exist.\n        if (indexToDelete >= 0) {\n            newState.vacations.splice(indexToDelete, 1); // Delete\n        }\n        break;\n  }\n\n  return newState; // Return the new state\n}\n\n// 5. Store - redux object for managing the global state:\nexport const vacationsStore = createStore(vacationsReducer);"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA;AACA,OAAO,MAAMC,cAAN,CAAqB;EAAA;IAAA,KACnBC,SADmB,GACU,EADV;EAAA,EACc;;;AADd,C,CAI5B;;AACA,WAAYC,mBAAZ,C,CAOA;;WAPYA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAaZ;AACA,OAAO,SAASC,gBAAT,GAA2G;EAAA,IAA/EC,YAA+E,uEAAhE,IAAIJ,cAAJ,EAAgE;EAAA,IAA1CK,MAA0C;EAEhH,MAAMC,QAAQ,GAAG,EAAE,GAAGF;EAAL,CAAjB,CAFgH,CAE1E;EAEtC;;EACA,QAAQC,MAAM,CAACE,IAAf;IACE,KAAKL,mBAAmB,CAACM,cAAzB;MAAyC;MACrCF,QAAQ,CAACL,SAAT,GAAqBI,MAAM,CAACI,OAA5B,CADJ,CACyC;;MACrC;;IAEJ,KAAKP,mBAAmB,CAACQ,WAAzB;MAAsC;MAClCJ,QAAQ,CAACL,SAAT,CAAmBU,IAAnB,CAAwBN,MAAM,CAACI,OAA/B,EADJ,CAC6C;;MACzC;;IAEJ,KAAKP,mBAAmB,CAACU,cAAzB;MAAyC;MACrC,MAAMC,aAAa,GAAGP,QAAQ,CAACL,SAAT,CAAmBa,SAAnB,CAA6BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASX,MAAM,CAACI,OAAP,CAAeO,EAA1D,CAAtB,CADJ,CACyF;;MAErF,IAAIH,aAAa,IAAI,CAArB,EAAwB;QACpBP,QAAQ,CAACL,SAAT,CAAmBY,aAAnB,IAAoCR,MAAM,CAACI,OAA3C,CADoB,CACgC;MACvD;;MACD;;IAEJ,KAAKP,mBAAmB,CAACe,cAAzB;MAAyC;MACrC,MAAMC,aAAa,GAAGZ,QAAQ,CAACL,SAAT,CAAmBa,SAAnB,CAA6BK,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASX,MAAM,CAACI,OAAlD,CAAtB,CADJ,CACsF;;MAClF,IAAIS,aAAa,IAAI,CAArB,EAAwB;QACpBZ,QAAQ,CAACL,SAAT,CAAmBmB,MAAnB,CAA0BF,aAA1B,EAAyC,CAAzC,EADoB,CACyB;MAChD;;MACD;EAtBN;;EAyBA,OAAOZ,QAAP,CA9BgH,CA8B/F;AAClB,C,CAED;;AACA,OAAO,MAAMe,cAAc,GAAGtB,WAAW,CAACI,gBAAD,CAAlC"},"metadata":{},"sourceType":"module"}